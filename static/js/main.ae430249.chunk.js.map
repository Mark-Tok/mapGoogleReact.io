{"version":3,"sources":["serviceWorker.js","components/List.js","components/Map.js","index.js"],"names":["Boolean","window","location","hostname","match","getItemStyle","isDragging","draggableStyle","userSelect","background","color","width","margin","padding","getListStyle","isDraggingOver","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","List","props","className","onDragEnd","destination","items","source","index","dragItemProps","droppableId","provided","snapshot","ref","innerRef","style","map","item","key","draggableId","draggableProps","dragHandleProps","value","onClick","deletItem","placeholder","MapContainer","centerMoved","mapProps","setState","position","lat","getCenter","lng","addMarkerKeyEnter","event","keyCode","addMarker","inputRef","current","alert","state","length","objCoord","currentPosition","inputValue","clone","find","element","undefined","onMarkerClick","marker","e","title","name","activeMarker","showingInfoWindow","dragMarker","coord","latLng","dragItem","newItems","React","createRef","initialCenter","this","onDragend","maxWidth","height","overflow","google","zoom","draggable","t","visible","path","strokeColor","strokeOpacity","strokeWeight","onKeyUp","type","Component","GoogleApiWrapper","apiKey","ReactDOM","render","Map","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae430249.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\r\nimport React from 'react';\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  userSelect: \"none\",\r\n  background: isDragging ? \"lightgreen\" : \"#0062ff\",\r\n  color: \"white\",\r\n  width: \"244px\",\r\n  margin: \"10px 0px\",\r\n  padding: \"5px 0px\",\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? \"#f0f0f0\" : \"#ffffff\",\r\n});\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n  return result;\r\n};\r\n\r\nfunction List(props) {\r\n\r\n  const onDragEnd = (result) => {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n    const items = reorder(\r\n      props.list,\r\n      result.source.index,\r\n      result.destination.index\r\n    );\r\n    props.dragItemProps(items)\r\n  }\r\n\r\n const deletItem = (index) => {\r\n    props.list.splice(index, 1)\r\n    props.dragItemProps(props.list)\r\n  }\r\n\r\n  return (\r\n    <div className=\"list__items\">\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"droppable\">\r\n          {(provided, snapshot) => (\r\n            <div ref={provided.innerRef} style={getListStyle(snapshot.isDraggingOver)}>\r\n              {props.list.map((item, index) => (\r\n                <div>\r\n                  <Draggable key={index} draggableId={`id-${index}`} index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={getItemStyle(\r\n                          snapshot.isDragging,\r\n                          provided.draggableProps.style\r\n                        )}>\r\n                        <div className=\"list__itemWrapper\">\r\n                          <div className=\"list__item\">\r\n                            {item.value}\r\n                          </div>\r\n                          <div className=\"list__button\">\r\n                            <button className=\"list__buttonDelete\" onClick={() => { deletItem(index) }}></button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                </div>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default List;","import React from 'react';\r\nimport { Map, InfoWindow, Marker, GoogleApiWrapper, Polyline } from 'google-maps-react';\r\nimport List from './List.js'\r\n\r\nconst API_KEY = 'AIzaSyCEMRXxrGO6v2B-jBiwduxMLQvDsRxt2YY'\r\n\r\nclass MapContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      position: {\r\n        lat: 55.8134597669811,\r\n        lng: 48.85027343749992\r\n      },\r\n      items: [],\r\n      showingInfoWindow: false,\r\n      activeMarker: {},\r\n      title: ''\r\n    }\r\n    this.inputRef = React.createRef();\r\n  }\r\n\r\n  centerMoved = (mapProps, map) => {\r\n    this.setState({\r\n      position: {\r\n        lat: map.getCenter().lat(),\r\n        lng: map.getCenter().lng()\r\n      }\r\n    })\r\n  }\r\n\r\n  addMarkerKeyEnter = (event) => {\r\n    if (event.keyCode === 13) {\r\n      this.addMarker()\r\n    }\r\n  }\r\n\r\n  addMarker = () => {\r\n    if (this.inputRef.current.value === '') {\r\n      alert('Введите название пункта назначения')\r\n    }\r\n    else {\r\n      if (this.state.items.length === 0 || this.state.length < 1) {\r\n        this.setState({\r\n          position: {\r\n            lat: this.state.position.lat,\r\n            lng: this.state.position.lng,\r\n            value: this.inputRef.current.value\r\n          },\r\n        }, () => {\r\n          this.setState({\r\n            items: [...this.state.items, this.state.position]\r\n          })\r\n        })\r\n        this.inputRef.current.value = '';\r\n      }\r\n      else {\r\n        let objCoord = this.state.items.map((item) => {\r\n          return item\r\n        });\r\n        let currentPosition = this.state.position;\r\n        let inputValue = this.inputRef.current.value;\r\n        function findClone(element) {\r\n          return element.lat === currentPosition.lat || element.value === inputValue\r\n        }\r\n        let clone = objCoord.find(findClone)\r\n        if (clone !== undefined) {\r\n          if (clone.lat === this.state.position.lat) {\r\n            alert('В данной точке уже есть маркер, выберете другую точку на карте');\r\n            this.inputRef.current.value = '';\r\n          }\r\n          else if (clone.value === this.inputRef.current.value) {\r\n            alert(`Маркер ${clone.value} уже существует, выберете другое название`)\r\n            this.inputRef.current.value = '';\r\n          }\r\n        }\r\n        else {\r\n          this.setState({\r\n            position: {\r\n              lat: this.state.position.lat,\r\n              lng: this.state.position.lng,\r\n              value: this.inputRef.current.value\r\n            },\r\n          }, () => {\r\n            this.setState({\r\n              items: [...this.state.items, this.state.position]\r\n            })\r\n          })\r\n          this.inputRef.current.value = '';\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  onMarkerClick = (props, marker, e) => {\r\n    this.setState({\r\n      title: props.name,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true\r\n    })\r\n  };\r\n\r\n  dragMarker = (coord, index, item) => {\r\n    let marker = {\r\n      lat: coord.latLng.lat(),\r\n      lng: coord.latLng.lng(),\r\n      value: item.value\r\n    };\r\n    this.state.items.splice(index, 1, marker)\r\n    this.setState({\r\n      items: this.state.items,\r\n      showingInfoWindow: false\r\n    })\r\n  }\r\n\r\n  dragItem = (newItems) => {\r\n    this.setState({ items: newItems })\r\n  }\r\n\r\n  render() {\r\n    const initialStyle = {\r\n      maxWidth: '700px',\r\n      height: '500px',\r\n      width: '100%',\r\n      overflow: 'hidden'\r\n    }\r\n    return (\r\n      <div>\r\n        <div className=\"title\">Введите пункт назначение, маркер появится в центре, также можно поменять пункты местами(dragndrop) и менять положение на карте</div>\r\n        <div className=\"wrapper\">\r\n          <div className=\"wrapper__map\">\r\n            <Map initialCenter={{\r\n              lat: this.state.position.lat,\r\n              lng: this.state.position.lng\r\n            }}\r\n              onDragend={this.centerMoved}\r\n              style={initialStyle}\r\n              google={this.props.google}\r\n              zoom={10}>\r\n              {\r\n                this.state.items.map((item, index) => {\r\n                  return <Marker\r\n                    onClick={this.onMarkerClick}\r\n                    draggable={true}\r\n                    name={item.value}\r\n                    key={index}\r\n                    position={{ lat: item.lat, lng: item.lng }}\r\n                    onDragend={(t, map, coord) => this.dragMarker(coord, index, item)} />\r\n                })\r\n              }\r\n              <InfoWindow marker={this.state.activeMarker} visible={this.state.showingInfoWindow}>\r\n                <div>\r\n                  <h3>{this.state.title}</h3>\r\n                </div>\r\n              </InfoWindow>\r\n              <Polyline\r\n                path={this.state.items.map((item) => { return item; })}\r\n                strokeColor=\"#0004ff\"\r\n                strokeOpacity={1}\r\n                strokeWeight={4} />\r\n            </Map>\r\n          </div>\r\n          <div className=\"wrapper__list list\">\r\n            <div className=\"list__input\">\r\n              <input onKeyUp={this.addMarkerKeyEnter} ref={this.inputRef} type=\"text\" />\r\n              <button onClick={this.addMarker}>Добавить</button>\r\n            </div>\r\n            <List dragItemProps={this.dragItem} list={this.state.items} />\r\n          </div>\r\n        </div>\r\n      </div>);\r\n  }\r\n}\r\nexport default GoogleApiWrapper({\r\n  apiKey: (API_KEY)\r\n})(MapContainer)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport MapContainer from './components/Map'\r\nimport './style.scss'\r\n\r\nReactDOM.render(\r\n        <MapContainer/>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}